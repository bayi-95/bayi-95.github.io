import{_ as s,c as i,o as a,V as t,aq as e}from"./chunks/framework.q1JKCtYc.js";const y=JSON.parse('{"title":"暗黑模式前端修改方案","description":"之前我们做过公有云换肤方案，有长沙、乌鲁木齐几种主题包，使用的是样式变量的方式，可以支持在线动态换肤。结合这次暗黑模式的需求，综合考虑适用性、改动量，沿用这种方案，新增dark主题，做了些代码改造.","frontmatter":{"title":"暗黑模式前端修改方案","description":"之前我们做过公有云换肤方案，有长沙、乌鲁木齐几种主题包，使用的是样式变量的方式，可以支持在线动态换肤。结合这次暗黑模式的需求，综合考虑适用性、改动量，沿用这种方案，新增dark主题，做了些代码改造.","isPage":true,"date":"2023-1-18","tags":["换肤","暗黑"]},"headers":[{"level":1,"title":"暗黑模式前端修改方案","slug":"暗黑模式前端修改方案","link":"#暗黑模式前端修改方案","children":[]}],"relativePath":"pages/javascript/暗黑模式前端修改方案.md","filePath":"pages/javascript/暗黑模式前端修改方案.md","lastUpdated":1707111033000}'),l={name:"pages/javascript/暗黑模式前端修改方案.md"},h=t(`<h1 id="暗黑模式前端修改方案" tabindex="-1">暗黑模式前端修改方案 <a class="header-anchor" href="#暗黑模式前端修改方案" aria-label="Permalink to &quot;暗黑模式前端修改方案&quot;">​</a></h1><h2 id="_1-背景" tabindex="-1">1. 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1. 背景&quot;">​</a></h2><p>之前我们做过公有云换肤方案，有长沙、乌鲁木齐几种主题包，使用的是样式变量的方式，可以支持在线动态换肤。结合这次暗黑模式的需求，综合考虑适用性、改动量，沿用这种方案，新增 dark 主题，做了些代码改造。</p><h2 id="_2-改造思路" tabindex="-1">2. 改造思路 <a class="header-anchor" href="#_2-改造思路" aria-label="Permalink to &quot;2. 改造思路&quot;">​</a></h2><h4 id="_2-1-跟随系统" tabindex="-1">2.1 跟随系统 <a class="header-anchor" href="#_2-1-跟随系统" aria-label="Permalink to &quot;2.1 跟随系统&quot;">​</a></h4><p>通过 window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches 可以判断系统是否是暗黑模式，加监听，改变时判断重置主题。</p><h4 id="_2-2-客户端注入" tabindex="-1">2.2 客户端注入 <a class="header-anchor" href="#_2-2-客户端注入" aria-label="Permalink to &quot;2.2 客户端注入&quot;">​</a></h4><p>客户端注入，可以通过<code>window.SnColorTheme</code>获取。如果注入不及时，可以加监听来设置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听客户端抛出的主题变动事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SnThemeChange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> snColorTheme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.SnColorTheme</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> themeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (snColorTheme) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;light&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			themeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Light&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dark&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			themeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Dark&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	themeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(themeName, res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="_2-3-图片静态资源处理" tabindex="-1">2.3 图片静态资源处理 <a class="header-anchor" href="#_2-3-图片静态资源处理" aria-label="Permalink to &quot;2.3 图片静态资源处理&quot;">​</a></h4><p>图片文件根据引入类型做不同处理（应该大部分不用变，只个别图需要）：</p><p>1）背景图方式</p><p>图片文件，通过背景图方式引入，在对应主题包下的 img 文件夹放图片资源。</p><ol><li><p>可以通过样式覆盖背景图</p></li><li><p>也可以把图片地址当作变量提出来</p></li><li><p>推荐第二种，需准备多套图</p></li></ol><p>PS: 把图片亮度变暗，可以使用以下方式：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 方法1: 会使背景色上面的元素变化</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: brightness(80%); // 设置图片的亮度，使其看起来更亮或更暗</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opacity: 0.9;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 方法2: 有些渐变色的图，如果用这种方法，边界会明显些，效果不太好</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">background: linear-gradient(rgba(0, 0, 0, 0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), rgba(0, 0, 0, 0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	url(&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assets/img/img_note_topbg.png&#39;) </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">no-repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top left;</span></span></code></pre></div><p>2）img 引入/require 引入</p><p>在对应 theme 下 img 目录放对应的图片资源，写一个方法，处理传入的图片地址，返回在当前主题下静态资源地址，例如：</p><ol><li><p>引入依赖，页面混入<code>ThemeMixin</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThemeMixin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;themes/utils/mixin&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getThemeImg } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;themes/utils&#39;</span></span></code></pre></div></li><li><p>使用<code>getThemeImg</code>处理图片，注意要加上<code>key=&quot;themeKey&quot;</code>，这样在线动态切换主题时，会更新图片</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getThemeImg(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require(</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&#39;assets/img/icon_invoice_pdf.png&#39;),</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> &#39;icon_invoice_pdf.png&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> )</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{200}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{200}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{themeKey}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>tips: 因为不能 require(变量)，所以这里直接传入了。</p></li></ol><p>3）部分简单的图可以考虑直接图片反色处理（如果 UI 同意）</p><p><code>filter: invert(100%)</code>，黑的变白的，需要反色的图加全局 class 类名。</p><p>4）复杂的 svg（图形组合）</p><ul><li>Color 只能控制一种颜色，如果背景色与图形是两种色值，可以的话，把背景色去掉，让外面容器控制，让 color 修改图形颜色；</li><li>如果不行，考虑两套 svg，根据 window.SINO_THEME 判断控制，混入<code>ThemeMixin</code>在线动态切换主题时，会更新 svg；</li><li>svg 图里的 fill=&#39;&#39; 这里可以使用样式变量；</li></ul><h4 id="_2-4-一些自定义的特殊元素" tabindex="-1">2.4 一些自定义的特殊元素 <a class="header-anchor" href="#_2-4-一些自定义的特殊元素" aria-label="Permalink to &quot;2.4 一些自定义的特殊元素&quot;">​</a></h4><p>比如自定义渐变色的按钮，需要根据暗黑效果（问下 ui），在暗黑主题样式文件里<code>style/index.less</code> 写样式覆盖修改。</p><h2 id="_3-修改点" tabindex="-1">3. 修改点 <a class="header-anchor" href="#_3-修改点" aria-label="Permalink to &quot;3. 修改点&quot;">​</a></h2><blockquote><p>注意：</p><ol><li>背景色是白色的，改为黑色，定义个变量 <code>@background-white</code>（组件库里的写样式覆盖掉）；文字是白色的不用改</li><li>建议全局搜索，: #，找出项目里没有用样式变量的颜色，做下提取变量处理</li><li>我们目前暗黑的改造是不涉及组件库的，那么遇到组件库里没有用样式变量的地方，如果需要变色那要覆盖修改下样式</li><li>改完后，需要一个个页面看下，有样式不确定的找下 UI</li></ol></blockquote><p>之前有换肤改造的：</p><ol><li><p>把之前的<code>themes</code>移动到项目根目录下</p></li><li><p><code>source</code>里<code>themes</code>下的资源，替换<code>themes</code>下 index.js，删除 themeMap.js、删除其他主题比如：ChangSha、WuLuMuQi，先保留 default，添加 Dark、light 主题、utils 文件夹</p></li><li><p>build 目录下<code>custom-theme.js</code>里面的内容，业务变量对比复制到<code>utils/variables.js</code>文件里，然后这个文件删掉</p></li><li><p>替换<code>webpack.theme.config.js</code></p></li><li><p><code>webpack.base.config.js</code>修改如下：</p></li></ol><img src="`+e+`" height="400"><ol start="6"><li><p><code>webpack.build.config.js</code>修改：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseConfig.plugins[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].definitions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PRIVATE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseConfig, prodConfig)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> themeConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseConfig, prodConfig))</span></span></code></pre></div><p>修改为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> themeConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseConfig, prodConfig))</span></span></code></pre></div></li><li><p><s>项目入口文件，Index.html 里面 meta 标签下面加上这段代码： 客户端说不需要加了</s></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- &lt;meta name=&quot;color-scheme&quot; content=&quot;dark light&quot;&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 此meta用于适应暗黑的页面背景，但是weboa禁用暗黑，如果电脑是暗黑模式，刷新页面会由黑闪到白，所以媒体查询使用替代方案 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">767</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			color-scheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">light</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>项目入口文件，index.js 里面引入<code>ThemeLoader</code>路径修改，之前的删掉：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThemeLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/themeLoader&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThemeLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;themes/utils/loader&#39;</span></span></code></pre></div></li><li><p>之前 commonUtil.js 里 getCssVarValue 方法移到了 themes/utils/index.js 里，可以删掉了，引入方式修改：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getCssVarValue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;themes/utils&#39;</span></span></code></pre></div></li><li><p>Light 主题相当于之前的 default，把之前 default 的内容复制到 Light 里</p></li><li><p>根据前面写的注意事项，检查、修改、提取样式变量（注意命名、写好注释，以方便后面维护）</p></li><li><p>处理图片，可参考 2.3 图片静态资源处理</p></li></ol><p>之前没做换肤改造的：</p><p>步骤如上，涉及的文件建议文件对比看下</p><h2 id="_4-待处理-问题" tabindex="-1">4. 待处理 &amp; 问题 <a class="header-anchor" href="#_4-待处理-问题" aria-label="Permalink to &quot;4. 待处理 &amp; 问题&quot;">​</a></h2><ol><li><p>沉浸式 title 传值修改，应该要改 lib 库 ---- 已完成</p></li><li><p>我们目前暗黑的改造是不涉及组件库的，那么遇到组件库里没有用样式变量的地方，需要覆盖改背景色的，整理一份 ---- 已完成</p></li><li><p>weboa、手机网银（公式融合）暂时屏蔽暗黑 ---- 已完成</p></li></ol><h2 id="_5-附录" tabindex="-1">5. 附录： <a class="header-anchor" href="#_5-附录" aria-label="Permalink to &quot;5. 附录：&quot;">​</a></h2><ol><li><p><a href="https://docs.qq.com/sheet/DWnNOdk1waU1ZeGlm?tab=uc57cn" target="_blank" rel="noreferrer">UI 兆日科技原子样式换肤清单——暗黑模式</a></p></li><li><p><a href="https://bizmatedev.sinosun.com:17280/bizmate/static/notepad/pages/index.html" target="_blank" rel="noreferrer">记事本开发部署了，改动在 theme 分支上，可以参考</a></p></li></ol>`,37),n=[h];function p(k,d,r,o,g,E){return a(),i("div",null,n)}const F=s(l,[["render",p]]);export{y as __pageData,F as default};
